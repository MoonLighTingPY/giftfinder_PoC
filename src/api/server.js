import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import mysql from 'mysql2/promise';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import process from 'process';
import { translateToEnglish, getImageUrl } from '../services/pexelsService.js';
import { giftSelectionService } from '../services/giftSelectionService.js';
import { initDuplicateCleaner } from './duplicateCleaner.js';

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
dotenv.config();
const app = express();
const PORT = process.env.PORT || 3001;

// Middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ CORS —Ç–∞ JSON
app.use(cors());
app.use(express.json());
app.use((req, res, next) => {
  res.setHeader(
    'Content-Security-Policy',
    "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https://images.pexels.com; font-src 'self'; connect-src 'self' http://192.168.0.251:3001 ws://192.168.0.251:* http://localhost:3001 ws://localhost:*;"
  );
  next();
});

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
export const pool = mysql.createPool({
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'gift_finder',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
  decimalNumbers: true // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ–± –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —á–∏—Å–ª–∞ –∑ –ø–ª–∞–≤–∞—é—á–æ—é –∫–æ–º–æ—é, –∞ –Ω–µ —Ç–µ–∫—Å—Ç –∑ –±–¥
});

// Middleware —â–æ–± –≤–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ jwt —Ç–æ–∫–µ–Ω
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) return res.status(401).json({ message: 'Unauthorized' });

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Forbidden' });
    req.user = user;
    next();
  });
};

// –ü–æ—á–∞—Ç–∏ –æ—á–∏—â–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
initDuplicateCleaner(pool);

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏
app.post('/api/register', async (req, res) => {
  try {
    const { username, email, password } = req.body;
    const [existingUsers] = await pool.query(
      'SELECT * FROM users WHERE username = ? OR email = ?',
      [username, email]
    );

    if (existingUsers.length > 0) {
      return res.status(409).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ –µ–º–µ–π–ª –≤–∂–µ —ñ—Å–Ω—É—î' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    await pool.query(
      'INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)',
      [username, email, hashedPassword]
    );

    res.status(201).json({ message: '–£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è!)' });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞' });
  }
});

app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const [users] = await pool.query(
      'SELECT * FROM users WHERE username = ?',
      [username]
    );

    if (users.length === 0) {
      return res.status(401).json({ message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ' });
    }

    const user = users[0];
    const isPasswordValid = await bcrypt.compare(password, user.password_hash);

    if (!isPasswordValid) {
      return res.status(401).json({ message: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ' });
    }

    const token = jwt.sign(
      { id: user.id, username: user.username },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    res.json({
      message: '–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥!)',
      user: { id: user.id, username: user.username, email: user.email },
      token
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞' });
  }
});


const pendingAiSuggestions = new Map();

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É) –Ω–∞ –±–∞–∑—ñ –∑–∞–ø–∏—Ç—É –∑ AI
app.post('/api/gifts/recommend', authenticateToken, async (req, res) => {
  const requestId = Date.now().toString() + Math.random().toString(36).slice(2);

  try {
    const { age, gender, interests, profession, budget, occasion, useAi, aiGiftCount = 3 } = req.body;

    // –ü–∞—Ä—Å–∏–º–æ –±—é–¥–∂–µ—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ SQL –∑–∞–ø–∏—Ç–∞—Ö
    let budgetMin = 0;
    let budgetMax = 99999;

    // –Ø–∫—â–æ –±—é–¥–∂–µ—Ç –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if (budget && typeof budget === 'string' && budget !== 'any') {
      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–∏–º–≤–æ–ª–∏ –≤–∞–ª—é—Ç–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏
      const parts = budget.split('-').map(p => parseFloat(p.replace(/[^0-9.]/g, '')));
      if (parts.length === 1 && !isNaN(parts[0])) {
        budgetMax = parts[0]; // –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –ª–∏—à–µ –≤–µ—Ä—Ö–Ω—é –º–µ–∂—É, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ó—ó
      } else if (parts.length === 2 && !isNaN(parts[0]) && !isNaN(parts[1])) {
        // –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –æ–±–∏–¥–≤—ñ –º–µ–∂—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
        budgetMin = parts[0];
        budgetMax = parts[1];
      }
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    console.log(`Processing request ${requestId} with budget range: $${budgetMin}-$${budgetMax}`);

    // 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —è–∫—ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ –±—é–¥–∂–µ—Ç
    const [allGifts] = await pool.query(`
      SELECT 
        id, name, name_en, description, price_range, 
        budget_min, budget_max, image_url, ai_generated
      FROM gifts
      WHERE budget_min <= ? AND budget_max >= ?
    `, [budgetMax, budgetMin]);

    console.log(`Found ${allGifts.length} gifts matching budget criteria`);

    if (allGifts.length === 0) {
      return res.json({
        gifts: [],
        aiStatus: useAi ? 'generating' : 'not_started',
        requestId: useAi ? requestId : null
      });
    }

    // 2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –®–Ü –¥–ª—è –≤–∏–±–æ—Ä—É –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const selectedGifts = await giftSelectionService.selectGifts({
      userCriteria: { age, gender, interests, profession, occasion },
      gifts: allGifts,
      limit: 8
    });

    // 2.1 –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤
    const enrichedGifts = await enrichGiftsWithImages(selectedGifts);

    // 3. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–º–∫–Ω—É–≤ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –®–Ü, –∑–∞–ø—É—Å–∫–∞—î–º–æ —ó—ó –Ω–∞ —Ñ–æ–Ω—ñ
    if (useAi) {
      pendingAiSuggestions.set(requestId, { status: 'generating' });

      generateAiGifts({
        age,
        gender,
        interests,
        profession,
        budget,
        occasion,
        existingGifts: enrichedGifts,
        requestId,
        giftCount: aiGiftCount
      }).catch(err => {
        console.error(`AI gift generation error: ${err.message}`);
        pendingAiSuggestions.set(requestId, {
          status: 'error',
          error: 'Failed to generate AI gifts'
        });
      });
    }

    // 4. –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    res.json({
      gifts: enrichedGifts,
      aiStatus: useAi ? 'generating' : 'not_started',
      requestId: useAi ? requestId : null
    });
  } catch (error) {
    console.error('Gift recommendation error:', error);
    if (requestId && pendingAiSuggestions.has(requestId)) {
      pendingAiSuggestions.set(requestId, {
        status: 'error',
        error: error.message || 'Server error'
      });
    }
    res.status(500).json({
      message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.',
      error: error.message
    });
  }
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ (—â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —ñ –≤—Å—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ)
app.get('/api/gifts/ai-status/:requestId', authenticateToken, async (req, res) => {
  const { requestId } = req.params;
  const aiResult = pendingAiSuggestions.get(requestId);

  if (!aiResult) {
    return res.json({ status: 'pending' });
  }

  // –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–∫–∏, —è–∫—ñ –≤–∂–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ
  res.json(aiResult);

  // –¢—ñ–ª—å–∫–∏ –≤–∏–¥–∞–ª—è—î–º–æ –∑ —á–µ—Ä–≥–∏, —è–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –ø–æ–º–∏–ª–∫–∞
  if (aiResult.status === 'completed' || aiResult.status === 'error') {
    pendingAiSuggestions.delete(requestId);
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ AI –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function generateAiGifts({ age, gender, interests, profession, budget, occasion, existingGifts, requestId, giftCount = 3 }) {
  console.log(`üß† [${requestId}] Starting AI gift generation`);

  // Initialize with empty gifts array
  pendingAiSuggestions.set(requestId, {
    status: 'generating',
    gifts: [],
    total: giftCount,
    completed: 0
  });

  try {
    // 1. –ì–Ω–µ—Ä–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const aiGiftSuggestions = await giftSelectionService.generateNewGifts({
      userCriteria: { age, gender, interests, profession, occasion, budget },
      existingGifts: existingGifts.map(g => g.name),
      count: giftCount
    });
    console.log(`üß† [${requestId}] Generated ${aiGiftSuggestions.length} new gift suggestions`);

    // 2. –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –æ–¥–∏–Ω –∑–∞ –æ–¥–Ω–∏–º
    for (const gift of aiGiftSuggestions) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
      const [[exists]] = await pool.query(
        'SELECT id FROM gifts WHERE name = ?',
        [gift.name]
      );

      if (exists) {
        console.log(`‚ö†Ô∏è [${requestId}] Gift "${gift.name}" already exists, skipping`);
        continue;
      }

      // –¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—è –Ω–∞–∑–≤–∏ –ø–æ–¥–∞—Ä—É–Ω–∫–∞ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É, –±–æ Pexels API –ø–æ–≥–∞–Ω–æ —à—É–∫–∞—î —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
      let name_en = null;
      try {
        name_en = await translateToEnglish(gift.name);
      } catch (err) {
        console.warn(`‚ö†Ô∏è [${requestId}] Translation failed for "${gift.name}": ${err.message}`);
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞
      let image_url = null;
      try {
        const queryName = name_en || gift.name;
        image_url = await getImageUrl(queryName, Boolean(name_en));
      } catch (err) {
        console.warn(`‚ö†Ô∏è [${requestId}] Failed to get image for "${gift.name}": ${err.message}`);
      }

      // –ü–∞—Ä—Å–∏–º–æ —Ü—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
      let budget_min = 0;
      let budget_max = 999;
      if (gift.price_range) {
        // –í–∏—Ç—è–≥—É—î–º–æ —Ü—ñ–Ω–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –∑ —Ä—è–¥–∫–∞, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ —Å–∏–º–≤–æ–ª–∏ –≤–∞–ª—é—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "$50-$100" –∞–±–æ "$50"
        gift.price_range = gift.price_range.replace(/[^0-9$-]/g, '');
        const priceMatch = gift.price_range.match(/\$?(\d+)(?:\s*-\s*\$?(\d+))?/);
        if (priceMatch) {
          budget_min = parseInt(priceMatch[1]) || 0;
          budget_max = parseInt(priceMatch[2] || priceMatch[1]) || 999;
        }
      }

      // –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —ñ –ø—Ä–∞–ø–æ—Ä—Ü–µ–º ai_generated = 1
      try {
        const [result] = await pool.query(
          `INSERT INTO gifts 
            (name, name_en, description, price_range, budget_min, budget_max, image_url, ai_generated) 
          VALUES (?, ?, ?, ?, ?, ?, ?, TRUE)`,
          [gift.name, name_en, gift.description, gift.price_range, budget_min, budget_max, image_url]
        );

        const newGiftId = result.insertId;
        const newGiftObject = {
          id: newGiftId,
          name: gift.name,
          name_en: name_en,
          description: gift.description,
          price_range: gift.price_range,
          budget_min: budget_min,
          budget_max: budget_max,
          image_url: image_url,
          ai_generated: true,
          ai_suggested: true
        };

        console.log(`‚úÖ [${requestId}] Inserted gift "${gift.name}" with ID ${newGiftId}`);

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤
        const currentStatus = pendingAiSuggestions.get(requestId);
        pendingAiSuggestions.set(requestId, {
          status: 'generating',
          gifts: [...currentStatus.gifts, newGiftObject],
          total: giftCount,
          completed: currentStatus.completed + 1
        });

      } catch (err) {
        console.error(`‚ùå [${requestId}] Failed to insert gift "${gift.name}": ${err.message}`);
      }
    }

    // 3. –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤
    const finalStatus = pendingAiSuggestions.get(requestId);
    pendingAiSuggestions.set(requestId, {
      status: 'completed',
      gifts: finalStatus.gifts
    });

    console.log(`‚úÖ [${requestId}] AI gift generation completed with ${finalStatus.gifts.length} new gifts`);
  } catch (err) {
    console.error(`‚ùå [${requestId}] AI gift generation error:`, err);
    pendingAiSuggestions.set(requestId, {
      status: 'error',
      error: err.message || 'Unknown error during AI gift generation'
    });
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–∞–≥–∞—á–µ–Ω–Ω—è –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
async function enrichGiftsWithImages(gifts) {
  const enrichedGifts = [...gifts];

  for (let i = 0; i < enrichedGifts.length; i++) {
    const gift = enrichedGifts[i];

    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∏, —è–∫—ñ –≤–∂–µ –º–∞—é—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    if (gift.image_url) continue;

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–∑–≤—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —è–∫—â–æ –≤–æ–Ω–∞ —î
    const queryName = gift.name_en || gift.name;
    const isEnglish = Boolean(gift.name_en && gift.name_en.trim());

    try {
      const imageUrl = await getImageUrl(queryName, isEnglish);
      if (imageUrl) {
        enrichedGifts[i] = {
          ...gift,
          image_url: imageUrl
        };

        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        await pool.query(
          'UPDATE gifts SET image_url = ? WHERE id = ?',
          [imageUrl, gift.id]
        );
      }
    } catch (error) {
      console.error(`‚ùå Could not find image for "${queryName}":`, error.message);
    }
  }

  return enrichedGifts;
}

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤
app.get('/api/refresh-images', authenticateToken, async (req, res) => {
  const forceRefresh = req.query.force === 'true';

  try {
    const [giftsToUpdate] = await pool.query(
      forceRefresh
        ? 'SELECT id, name, name_en FROM gifts WHERE name IS NOT NULL AND name != ""'
        : 'SELECT id, name, name_en FROM gifts WHERE (image_url IS NULL OR image_url = "") AND name IS NOT NULL AND name != ""'
    );

    if (giftsToUpdate.length === 0) {
      return res.json({ message: 'No gifts require image refresh' });
    }

    res.json({
      message: `Image refresh started for ${giftsToUpdate.length} gifts`,
      count: giftsToUpdate.length
    });

    // –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    (async () => {
      let updatedCount = 0;
      let failedCount = 0;

      for (const gift of giftsToUpdate) {
        try {
          const queryName = gift.name_en || gift.name;
          const isEnglish = Boolean(gift.name_en && gift.name_en.trim());
          const imageUrl = await getImageUrl(queryName, isEnglish);

          if (imageUrl) {
            await pool.query(
              'UPDATE gifts SET image_url = ? WHERE id = ?',
              [imageUrl, gift.id]
            );
            updatedCount++;
            console.log(`‚úÖ Added image for "${queryName}"`);
          } else {
            failedCount++;
            console.warn(`‚ö†Ô∏è No image found for "${queryName}"`);
          }
        } catch (err) {
          failedCount++;
          console.error(`‚ùå Error processing image for "${gift.name}":`, err.message);
        }

        // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –±–∞–Ω—É API
        await new Promise(resolve => setTimeout(resolve, 300));
      }

      console.log(`‚úÖ Image refresh complete. Updated: ${updatedCount}, Failed: ${failedCount}`);
    })().catch(err => {
      console.error('‚ùå Background image refresh error:', err);
    });
  } catch (error) {
    console.error('‚ùå Image refresh error:', error);
    res.status(500).json({ message: 'Error starting image refresh', error: error.message });
  }
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å
async function checkAndUpdateMissingImages() {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–¥–∞—Ä—É–Ω–∫–∏ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å
    const [giftsWithoutImages] = await pool.query(
      'SELECT * FROM gifts WHERE image_url IS NULL OR image_url = ""'
    );

    const missingImagesCount = giftsWithoutImages.length;

    if (missingImagesCount > 0) {
      console.log(`‚ö†Ô∏è Found ${missingImagesCount} gifts without images. Starting enrichment...`);

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–±–∞–≥–∞—á–µ–Ω–Ω—è –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
      const enrichedGifts = await enrichGiftsWithImages(giftsWithoutImages);

      const updatedCount = enrichedGifts.filter(gift => gift.image_url).length;
      const failedCount = missingImagesCount - updatedCount;

      console.log(`‚úÖ Image enrichment complete. Updated: ${updatedCount}, Failed: ${failedCount}`);
    } else {
      console.log('‚úÖ All gifts have images');
    }
  } catch (err) {
    console.error('‚ùå Error checking/enriching missing images:', err);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);

  checkAndUpdateMissingImages();

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å, —è–∫—â–æ —Ç–∞–∫—ñ —î - –æ–Ω–æ–≤–ª—é—î–º–æ —ó—Ö
  const imageCheckIntervalMs = 15 * 60 * 1000;
  setInterval(() => {
    console.log('üîÑ Running scheduled check for gifts without images');
    checkAndUpdateMissingImages();
  }, imageCheckIntervalMs);
});