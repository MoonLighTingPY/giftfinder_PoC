// src/services/pexelsService.js
import axios from 'axios';
import process from 'process';
import dotenv from 'dotenv';
import { translate } from '@vitalets/google-translate-api';
import { formatMistralPrompt, generateCompletion } from './aiService.js';

dotenv.config();

const pexelsApiKey = process.env.VITE_PEXELS_API_KEY;
const imageCache = new Map();
const translationCache = new Map();

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É —Ç–µ–∫—Å—Ç—É –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É
export async function translateToEnglish(text) {
  // 0) –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –≤–∂–µ —î –≤ –∫–µ—à—ñ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
  if (translationCache.has(text)) {
    console.log(`üîÑ Using cached translation for "${text}"`)
    return translationCache.get(text)
  }

  // 1) –ü—Ä–æ–±—É—î–º–æ Google Translate
  try {
    const result = await translate(text, { to: 'en' })
    const translatedText = result.text.trim()
    translationCache.set(text, translatedText)
    console.log(`‚úÖ Google translated "${text}" ‚Üí "${translatedText}"`)
    return translatedText
  } catch (err) {
    // –í–ø–µ—Ä–ª–∏—Å—è –≤ –ª—ñ–º—ñ—Ç (–∫–æ–¥ 429) –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞
    console.warn(`‚ùå Google translation failed for "${text}": ${err.message}`)
  }

  // 2) –ü—Ä–æ–±—É—î–º–æ –≤–∂–µ –®–Ü, —è–∫—â–æ –≥—É–≥–ª –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
  try {
    console.log(`ü§ñ LLM translating "${text}" ‚Üí English`)
    const systemPrompt =
      "You are a helpful assistant that translates Ukrainian to English. " +
      "Reply with ONLY the translation (no extra text). " +
      "If the input exceeds two words, ALWAYS produce a translation of at most two words. Never more than two twords!" +
      "If the text is already English, return it unchanged." +
      "NEVER add \"\" to your response, this is PROHIBITED! EVEN IF THE INPUT HAS \"\"!";
    const prompt = formatMistralPrompt(systemPrompt, text)
    const llamaResult = await generateCompletion(prompt, { temperature: 0, maxTokens: 100 })
    const llamaTranslation = llamaResult.trim()
    translationCache.set(text, llamaTranslation)
    console.log(`‚úÖ Llama translated "${text}" ‚Üí "${llamaTranslation}"`)
    return llamaTranslation
  } catch (err) {
    console.error(`‚ùå Llama translation failed for "${text}": ${err.message}`)
    return null
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ Pexels API
const makePexelsRequest = async (url, params) => {
  try {
    const response = await axios.get(url, {
      params,
      headers: { Authorization: pexelsApiKey }
    });
    return response.data; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  } catch (error) {
    // –ü–µ—Ä–µ–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —á–∏ —Ü–µ —Å—Ç–∞—Ç—É—Å 429 (–ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤)
    if (error.response?.status === 429) {
      console.warn(`‚ö†Ô∏è Pexels Rate Limit Hit`);
      return [];
    }
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞ –∑–∞–ø–∏—Ç–æ–º
export const searchImages = async (query, perPage = 1) => {
  if (imageCache.has(query)) {
    console.log(`üîÑ Using cached image for "${query}"`);
    return imageCache.get(query);
  }

  try {
    // –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –∑–∞–ø–∏—Ç–æ–º
    let data = await makePexelsRequest(`https://api.pexels.com/v1/search`, {
      query,
      per_page: perPage,
      orientation: 'square'
    });

    if (data.photos && data.photos.length > 0) {
      console.log(`‚úÖ Found ${data.photos.length} images for "${query}"`);
      imageCache.set(query, data.photos);
      return data.photos;
    }

    // eslint-disable-next-line no-unused-vars
  } catch (error) {
    // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –≤ makePexelsRequest
    return []; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π –º–∞—Å–∏–≤, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  }
};

export const getImageUrl = async (query, isEnglish) => {
  try {
    // –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∑–∞–ø–∏—Ç, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
    if (!isEnglish) {
      const translated = await translateToEnglish(query);
      // –¢—ñ–ª—å–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–∫–ª–∞–¥, —è–∫—â–æ –≤—ñ–Ω —É—Å–ø—ñ—à–Ω–∏–π (—â–æ–± –Ω–µ –±—É–ª–æ null/—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é)
      if (translated) {
        query = translated;
        console.log(`üîç Using translated query: "${query}"`);
      } else {
        console.log(`‚ö†Ô∏è Translation failed, using original query: "${query}"`);
      }
    } else {
      console.log(`üîç Searching for image with query: "${query}"`);
    }

    // –ü–æ—à—É–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞ –∑–∞–ø–∏—Ç–æ–º
    let photos = await searchImages(query, 1); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    // –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ URL
    if (photos && photos.length > 0) {
      console.log(`üñºÔ∏è Using image for "${query}": ${photos[0].src.medium}`);
      return photos[0].src.medium;  // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    }
    return null;

  } catch (error) {
    console.error(`‚ùå Error fetching image for "${query}":`, error.message);
    return null; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ null, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫
  }
};